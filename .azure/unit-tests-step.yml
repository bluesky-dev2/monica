steps:
- bash: |
    IFS='|' read -r -a TESTS <<< "$TESTSUITES"
    TESTSUITE=${TESTS[$SYSTEM_JOBPOSITIONINPHASE-1]}
    echo "TestSuite $TESTSUITE"
    echo "##vso[task.setvariable variable=TESTSUITE]$TESTSUITE"
  displayName: 'Select testsuite'
  env:
    TESTSUITES: "Api|Feature|Unit-Models|Unit-Services"

- bash: |
    source scripts/ci/fixsecrets.sh
    php artisan route:cache
    ulimit -S unlimited
    phpdbg -dmemory_limit=4G -qrr vendor/bin/phpunit -c phpunit.xml --log-junit ./results/junit/unit/results${SYSTEM_JOBPOSITIONINPHASE}.xml --coverage-clover ./results/coverage${SYSTEM_JOBPOSITIONINPHASE}.xml --testsuite $TESTSUITE
  displayName: 'Run unit tests'
  env:
    STRIPE_SECRET: $(STRIPE_SECRET)

- task: PublishTestResults@2
  displayName: 'Publish Test Results'
  inputs:
    testResultsFormat: JUnit
    testResultsFiles: 'results*.xml'
    searchFolder: '$(System.DefaultWorkingDirectory)/results/junit/unit'
    mergeTestResults: true
  condition: succeededOrFailed()

#- task: ReportGenerator@4
#  inputs:
#    reports: 'results/coverage*.xml'
#    targetdir: 'coveragereport'
#    reporttypes: 'Cobertura'
#  condition: succeededOrFailed()

#- task: PublishCodeCoverageResults@1
#  displayName: 'Publish code coverage'
#  inputs:
#    summaryFileLocation: 'coveragereport/*.xml'
#  condition: succeededOrFailed()

- task: PublishPipelineArtifact@0
  inputs:
    artifactName: 'results$(System.JobPositionInPhase)'
    targetPath: 'results'
